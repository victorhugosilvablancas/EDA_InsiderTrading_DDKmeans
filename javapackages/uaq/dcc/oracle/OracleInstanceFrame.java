package uaq.dcc.oracle;

//import conto.Contodata;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import uaq.dcc.datasets.Dataverse;
import uaq.dcc.edakmeansanalysis.Tools;

/**
 *
 * @author Victor Hugo Silva
 */
public class OracleInstanceFrame extends javax.swing.JFrame {
    private Dataverse datos;

    /**
     * Creates new form SQLFrame
     */
    public OracleInstanceFrame() {
        initComponents();
        setLocation(300,200);
        
        datos=new Dataverse(uaq.dcc.datasets.Dataverse.HARVARD_INSIDERTRADING);
        DatabaseStartUp.setEnabled(false);
        
        ShowTable();
        ShowDictionary();
    }
    private void ShowTable() {
        tabla.setModel(new DefaultTableModel(Clusterdata.SQLtabla,Clusterdata.SQLcabeza));
    }
    private void ShowDictionary() {
        tabladiccionario.setModel(new DefaultTableModel(
                tabladiccionario(),
                cabeza));
        setModeloColumn(tabladiccionario.getColumnModel().getColumn(0), 150, false, false);
        setModeloColumn(tabladiccionario.getColumnModel().getColumn(1), 300, false, false);
        setModeloColumn(tabladiccionario.getColumnModel().getColumn(2), 100, true, false);
        setModeloColumn(tabladiccionario.getColumnModel().getColumn(3), 100, true, false);
        setModeloColumn(tabladiccionario.getColumnModel().getColumn(4),   0, true, false);
        int r=tabladiccionario.getRowCount();
        if (r>0)
            tabulador.setTitleAt(1,"Dictionary ("+r+")");
        else tabulador.setTitleAt(1,"Dictionary");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pTodo = new javax.swing.JPanel();
        tabulador = new javax.swing.JTabbedPane();
        pConsultas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        comandoLb = new javax.swing.JLabel();
        comando = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabladiccionario = new javax.swing.JTable();
        pCabeza = new javax.swing.JPanel();
        DatabaseStartUp = new javax.swing.JButton();
        authorized = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Oracle Instance");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        comandoLb.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        comandoLb.setText("Instruction (DML or DQL):");

        comando.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        comando.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                comandoFocusGained(evt);
            }
        });
        comando.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comandoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout pConsultasLayout = new javax.swing.GroupLayout(pConsultas);
        pConsultas.setLayout(pConsultasLayout);
        pConsultasLayout.setHorizontalGroup(
            pConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pConsultasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(pConsultasLayout.createSequentialGroup()
                        .addComponent(comandoLb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comando, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pConsultasLayout.setVerticalGroup(
            pConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pConsultasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comandoLb)
                    .addComponent(comando, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );

        comandoLb.getAccessibleContext().setAccessibleName("Command");

        tabulador.addTab("Queries", pConsultas);

        tabladiccionario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabladiccionario);

        tabulador.addTab("Dictionary", jScrollPane2);

        pCabeza.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        DatabaseStartUp.setText("Database Start Up");
        DatabaseStartUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DatabaseStartUpActionPerformed(evt);
            }
        });

        authorized.setText("authorized");
        authorized.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorizedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pCabezaLayout = new javax.swing.GroupLayout(pCabeza);
        pCabeza.setLayout(pCabezaLayout);
        pCabezaLayout.setHorizontalGroup(
            pCabezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCabezaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DatabaseStartUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(authorized)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pCabezaLayout.setVerticalGroup(
            pCabezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCabezaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pCabezaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DatabaseStartUp)
                    .addComponent(authorized))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pTodoLayout = new javax.swing.GroupLayout(pTodo);
        pTodo.setLayout(pTodoLayout);
        pTodoLayout.setHorizontalGroup(
            pTodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pTodoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pTodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabulador)
                    .addComponent(pCabeza, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pTodoLayout.setVerticalGroup(
            pTodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pTodoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pCabeza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabulador, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabulador.getAccessibleContext().setAccessibleName("Queries");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pTodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pTodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comandoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comandoFocusGained
        comando.selectAll();
    }//GEN-LAST:event_comandoFocusGained

    private void comandoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comandoKeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            Ejecuta();
            comando.selectAll();
        }
    }//GEN-LAST:event_comandoKeyPressed

    private void DatabaseStartUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DatabaseStartUpActionPerformed
        DatabaseInit();
    }//GEN-LAST:event_DatabaseStartUpActionPerformed

    private void authorizedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorizedActionPerformed
        DatabaseStartUp.setEnabled(authorized.isSelected());
    }//GEN-LAST:event_authorizedActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DatabaseStartUp;
    private javax.swing.JCheckBox authorized;
    private javax.swing.JTextField comando;
    private javax.swing.JLabel comandoLb;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pCabeza;
    private javax.swing.JPanel pConsultas;
    private javax.swing.JPanel pTodo;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tabladiccionario;
    private javax.swing.JTabbedPane tabulador;
    // End of variables declaration//GEN-END:variables

    private void Ejecuta() {
        if (comando.getText().length()>0) {
            boolean hay=false;
            String instruccion=comando.getText().toUpperCase();
            //PREVINIENDO INYECCIONES
            if (instruccion.contains("DROP")) System.exit(0);
            if (instruccion.contains("TRUNC")) System.exit(0);
            
            if (instruccion.contains("SELECT")) {
                //contando las columnas:
                int idx=7;
                int fdx=instruccion.indexOf("FROM")-1;
                String[] partes=instruccion.substring(idx, fdx).split(",");
                if (partes.length>0) {
                    hay=Clusterdata.ComandoSQLframe(comando.getText(),partes.length);
                }
            } else {
                hay=Clusterdata.ComandoSQL(instruccion);
                if (hay) {
                    Clusterdata.SQLcabeza=new String[] {"Error"};
                    Clusterdata.SQLtabla=new String[1][1];
                    Clusterdata.SQLtabla[0][0]="Instrucción correctamente ejecutada.";
                }
            }
            if (!hay) {
                Clusterdata.SQLcabeza=new String[] {"Error"};
                Clusterdata.SQLtabla=new String[1][1];
                Clusterdata.SQLtabla[0][0]=Clusterdata.errorStr;
            }
            ShowTable();
        }
    }
    
    public String[] cabeza=new String[0];
    private String[][] tabladiccionario() {
        cabeza=new String[] {
            "Package",
            "Table",
            "Rows",
            "Blocks",
            "",
        };
        String[][] mitabla=new String[0][cabeza.length];
        Vector<String> cho=new Vector<>();
        alltablesdata midato=new alltablesdata();
        Integer icolor=0;
        int i=0;
        try {
            Class.forName(Clusterdata.Driver);
            Connection conn = DriverManager.getConnection(
                    Clusterdata.Url,
                    Clusterdata.InstanceUser,
                    Clusterdata.InstancePwd);
            Statement stmt = conn.createStatement();
            String instruccion="SELECT "
                    + "table_name,"
                    + "num_rows,"
                    + "blocks "
                    + "FROM all_tables "
                    + "WHERE owner='"+Clusterdata.InstanceUser+"' "
                    + "ORDER BY owner, table_name";
            ResultSet rs = stmt.executeQuery(instruccion);
            String apaque="XXX";
            midato=new alltablesdata();
            while (rs.next()) {
                midato.setPaquete(rs.getString(1));
                midato.renglones=rs.getInt(2);
                midato.bloques=rs.getInt(3);
                
                if (!apaque.equals(midato.paquete)) {
                    if (icolor.equals(1)) icolor=0;
                    else icolor=1;
                    
                    midato.color=icolor;
                    apaque=midato.paquete;
                }
                
                cho.add(midato.cadena());
                
                i++;
            }
            rs.close();stmt.close();conn.close();
        } catch (Exception e) {
            System.out.println(e.getLocalizedMessage());
        }
        if (cho.size()>0) {
            midato=new alltablesdata();
            int r=cho.size();
            mitabla=new String[r][cabeza.length];
            for (int j=0;j<r;j++) mitabla[j]=cho.get(j).split("\t");
        }
        return mitabla;
    }
    
    private class alltablesdata {
        String paquete;
        String tabla;
        Integer renglones;
        Integer bloques;
        Integer color;
        public alltablesdata() {
            paquete="";
            tabla="";
            renglones=0;
            bloques=0;
            color=0;
        }
        public void setPaquete(String cade) {
            if (cade.contains("_")) {
                int idx=cade.indexOf("_");
                paquete=cade.substring(0, idx);
                tabla=cade.substring(idx+1);
            } else {
                paquete="";
                tabla=cade;
            }
        }
        
        String cadena() {
            return paquete+"\t"
                    + tabla+"\t"
                    + renglones+"\t"
                    + bloques+"\t"
                    + color
                    ;
        }
    }
    //RENDERING
    public void setModeloColumn(TableColumn c,int Ancho,boolean derecha,boolean editable) {
        JTextField b = new JTextField();
        b.setEditable(editable);
        c.setCellEditor(new DefaultCellEditor(b));
        c.setMinWidth(Ancho);
        DefaultTableCellRenderer render= new MyTableCellRenderer();
        if (derecha) render.setHorizontalAlignment(JLabel.RIGHT);
        else render.setHorizontalAlignment(JLabel.LEFT);
        c.setCellRenderer(render);
        c.setResizable(false);
    }
    private static class MyTableCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            String acan=(String)table.getValueAt(row,4);
            if (acan!=null) {
                if (!acan.equals("null")) {
                    if (acan.equals("1")) 
                        c.setBackground(new Color(220,220,220));
                    else c.setBackground(Color.white);
                } else c.setBackground(Color.white);
            } else c.setBackground(Color.white);
            return c;
        }
    }
    
    
    /**
     * Initialize the Database in Oracle
     */
    private void DatabaseInit() {
        datos.getFields();
        datos.DrawFields();
        datos.getDataset(100);
        datos.DrawData();
        Dataverse.LaTeX=false;
        datos.Select(new int[] {8,10,20,24,34,38});
        DatabaseStartUp.setEnabled(false);
        authorized.setSelected(false);
    }
}
